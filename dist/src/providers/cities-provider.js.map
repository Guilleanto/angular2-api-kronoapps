{"version":3,"file":"cities-provider.js","sourceRoot":"","sources":["../../../src/providers/cities-provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,SAAS,CAAC;AACjB,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;;AAGvD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;;AAG9C,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;;IAGb,iCAAW;IAK1C,uBAAmB,IAAU,EAAS,YAAiC;QAAvE,YACI,kBAAM,IAAI,EAAE,YAAY,CAAC,SAC5B;QAFkB,UAAI,GAAJ,IAAI,CAAM;QAAS,kBAAY,GAAZ,YAAY,CAAqB;;uBAFjD,EAAE;;KAIvB;IAED,2EAA2E;;IAC3E,iCAAS;;IAAT,UAAU,OAAO,EAAE,aAAa;QAAhC,iBAkBC;QAhBG,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;QAGjB,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,cAAc,GAAC,aAAa,GAAC,iBAAiB,EAAE,IAAI,CAAC;aACvE,SAAS,CAAC,UAAA,MAAM;YACb,GAAG,CAAC,CAAY,UAAmB,EAAnB,KAAa,MAAM,EAAnB,cAAmB,EAAnB,IAAmB;gBAA9B,IAAI,GAAG,SAAA;gBACR,IAAI,IAAI,GAAc,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;gBACzC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1B;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;SAC9B,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;;gBA7BJ,UAAU;;;;gBAVF,IAAI;gBACJ,mBAAmB;;wBAH5B;EAamC,WAAW;SAAjC,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models\r\nimport { CityModel } from '../models/cityModel';\r\n\r\n@Injectable()\r\nexport class CitiesService extends BaseService {\r\n\r\n    // Cities array\r\n    cities: CityModel[] = [];\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // getCategories function: obtain information of categories in Botica store\r\n    getCities(baseUrl, applicationId) {\r\n\r\n        this.cities = [];\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'application/'+applicationId+'/cities/active/', null)\r\n            .subscribe(cities => {\r\n                for (var cit of <CityModel[]>cities) {\r\n                    var city: CityModel = new CityModel(cit);\r\n                    this.cities.push(city);\r\n                }\r\n                observer.next(this.cities);                                              \r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n        return observer;\r\n    }\r\n\r\n}"]}