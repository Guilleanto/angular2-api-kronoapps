{"version":3,"file":"products-provider.js","sourceRoot":"","sources":["../../../src/providers/products-provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,SAAS,CAAC;AACjB,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;;AAG9D,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;;AAG9C,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;;IAGjB,mCAAW;IAe5C,yBAAmB,IAAU,EAAS,YAAiC;QAAvE,YACI,kBAAM,IAAI,EAAE,YAAY,CAAC,SAC5B;QAFkB,UAAI,GAAJ,IAAI,CAAM;QAAS,kBAAY,GAAZ,YAAY,CAAqB;8BAbhD,IAAI,eAAe,CAAC,IAAI,CAAC;;yBAGrB,EAAE;;+BAGI,EAAE;;6BAGJ,EAAE;0BAEZ,KAAK;;KAIzB;IAED,sGAAsG;;IACtG,qCAAW;;IAAX,UAAY,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG;QAApE,iBAmBC;QAjBG,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEnB,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO,GAAG,YAAY;cAC/D,OAAO,GAAG,eAAe,GAAG,UAAU,GAAG,mBAAmB;cAC7D,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC;aACrC,SAAS,CAAC,UAAA,QAAQ;YACf,GAAG,CAAC,CAAa,UAAwB,EAAxB,KAAgB,QAAQ,EAAxB,cAAwB,EAAxB,IAAwB;gBAApC,IAAI,IAAI,SAAA;gBACT,IAAI,OAAO,GAAiB,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnD,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/B;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;SAChC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,+FAA+F;IAC/F,8CAA8C;;;IAC9C,2CAAiB;;;IAAjB,UAAkB,OAAO,EAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG;QAAhF,iBAmBC;QAjBG,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO,GAAG,YAAY;cAC/D,OAAO,GAAG,eAAe,GAAG,UAAU,GAAG,OAAO,GAAG,KAAK;YAC1D,mBAAmB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC;aAC1D,SAAS,CAAC,UAAA,QAAQ;YACf,GAAG,CAAC,CAAa,UAAwB,EAAxB,KAAgB,QAAQ,EAAxB,cAAwB,EAAxB,IAAwB;gBAApC,IAAI,IAAI,SAAA;gBACT,IAAI,OAAO,GAAiB,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnD,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACnC;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;SACpC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,0EAA0E;;IAC1E,oCAAU;;IAAV,UAAW,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS;QAE3C,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO,GAAG,WAAW,GAAG,SAAS,GAAG,GAAG,EAAE,IAAI,CAAC;aACjG,SAAS,CAAC,UAAA,OAAO;YACd,IAAI,YAAY,GAAiB,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3D,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC/B,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,qEAAqE;;IACrE,2CAAiB;;IAAjB,UAAkB,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG;QAA3D,iBA6BC;;QA1BG,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAElB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YAEzB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;gBAClD,mBAAmB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC;iBAClF,SAAS,CAAC,UAAA,QAAQ;gBACf,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,GAAG,CAAC,CAAa,UAAwB,EAAxB,KAAgB,QAAQ,EAAxB,cAAwB,EAAxB,IAAwB;oBAApC,IAAI,IAAI,SAAA;oBACT,IAAI,OAAO,GAAiB,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnD,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrC;gBACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;aACtC,EAAE,UAAA,KAAK;gBACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACxB,CAAC,CAAC;YACP,MAAM,CAAC,QAAQ,CAAC;SACnB;QAED,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC;SACnB;KAEJ;IAED,sEAAsE;;IACtE,wCAAc;;IAAd,UAAe,QAAQ,EAAE,UAAU;QAE/B,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,OAAO;YAC3B,MAAM,CAAC,CAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBACnE,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;SACzF,CAAC,CAAC;KACN;;gBAvHJ,UAAU;;;;gBAVF,IAAI;gBAEJ,mBAAmB;;0BAJ5B;EAaqC,WAAW;SAAnC,eAAe","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models\r\nimport { ProductModel } from '../models/productModel';\r\n\r\n@Injectable()\r\nexport class ProductsService extends BaseService {\r\n\r\n    public loadedProduct = new BehaviorSubject(null);\r\n    \r\n    // Products array from subcategory\r\n    products: ProductModel[] = [];\r\n\r\n    // Products array from seach\r\n    productsSought: ProductModel[] = [];\r\n\r\n    // Products array from tag\r\n    productsTags: ProductModel[] = [];\r\n\r\n    searching: boolean = false;\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // getStoreProducts function: obtain information of products from specific subcategory in Botica store\r\n    getProducts(baseUrl, chainId, storeId, categId, subcategId, ini, fin) {\r\n\r\n        this.products = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId + '/category/' \r\n                     + categId + '/subcategory/' + subcategId + '/products/active/'\r\n                    + ini + '/' + fin + '/', null)\r\n            .subscribe(products => {\r\n                for (var prod of <ProductModel[]>products) {\r\n                    var product: ProductModel = new ProductModel(prod);\r\n                    this.products.push(product);\r\n                }\r\n                observer.next(this.products);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;   \r\n    }\r\n\r\n    // getProductsPerTag function: obtain information of products from specific subcategory and tag\r\n    //                             in Botica store\r\n    getProductsPerTag(baseUrl,chainId, storeId, categId, subcategId, tagId, ini, fin) {\r\n\r\n        this.productsTags = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId + '/category/' \r\n                     + categId + '/subcategory/' + subcategId + '/tag/' + tagId +\r\n                     '/products/active/' + ini + '/' + fin + '/', null)\r\n            .subscribe(products => {\r\n                for (var prod of <ProductModel[]>products) {\r\n                    var product: ProductModel = new ProductModel(prod);\r\n                    this.productsTags.push(product);\r\n                }\r\n                observer.next(this.productsTags);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;\r\n    }\r\n\r\n    // getStoreProduct function: obtain information of product in Botica store\r\n    getProduct(baseUrl, chainId, storeId, productId) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId + '/product/' + productId + '/', null)\r\n            .subscribe(product => {\r\n                var productStore: ProductModel = new ProductModel(product);\r\n                observer.next(productStore);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;   \r\n    }\r\n\r\n    // getProductsSought function: obtain products with search in backend\r\n    getProductsSought(baseUrl, chainId, storeId, text, ini, fin) {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        if (text.length > 3) {\r\n\r\n            this.searching = true;\r\n            this.productsSought = [];\r\n\r\n            this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId + \r\n                         '/products/active/' + ini + '/' + fin + '/' + encodeURI(text) + '/', null)\r\n                .subscribe(products => {\r\n                    this.searching = false;\r\n                    for (var prod of <ProductModel[]>products) {\r\n                        var product: ProductModel = new ProductModel(prod);\r\n                        this.productsSought.push(product);\r\n                    }  \r\n                    observer.next(this.productsSought);                   \r\n                }, error => {\r\n                    observer.next(error);\r\n                });\r\n            return observer;\r\n        }\r\n\r\n        else {\r\n            return observer;\r\n        }\r\n        \r\n    }\r\n\r\n    // filterProducts function: filter products by the name or description\r\n    filterProducts(products, searchText) {\r\n\r\n        return products.filter((product) => {\r\n            return ( (product.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1) || \r\n                     (product.description.toLowerCase().indexOf(searchText.toLowerCase()) > -1) );\r\n        });     \r\n    }  \r\n\r\n}"]}