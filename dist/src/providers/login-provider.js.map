{"version":3,"file":"login-provider.js","sourceRoot":"","sources":["../../../src/providers/login-provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,SAAS,CAAC;AACjB,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;;AAG9D,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;;IAGZ,gCAAW;IAEzC,sBAAmB,IAAU,EACV,YAAiC;QADpD,YAGI,kBAAM,IAAI,EAAE,YAAY,CAAC,SAC5B;QAJkB,UAAI,GAAJ,IAAI,CAAM;QACV,kBAAY,GAAZ,YAAY,CAAqB;;KAGnD;IAED,oEAAoE;;IACpE,sCAAe;;IAAf,UAAgB,OAAO,EAAE,OAAO;;QAG5B,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAG,wBAAwB,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;aACzE,SAAS,CAAC,UAAA,IAAI;YACX,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,qEAAqE;;IACrE,mCAAY;;IAAZ,UAAa,OAAO,EAAE,OAAO,EAAE,QAAQ;QAAvC,iBASC;QAPG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAG,iCAAiC,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;aAClF,SAAS,CAAC,UAAA,IAAI;YACX,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACxC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;KACV;IAED,iEAAiE;;IACjE,iCAAU;;IAAV,UAAW,OAAO,EAAE,OAAO,EAAE,QAAQ;QAArC,iBASC;QAPG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAG,+BAA+B,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;aAChF,SAAS,CAAC,UAAA,IAAI;YACX,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACtC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;KACV;IAED,gFAAgF;;IAChF,mDAA4B;;IAA5B,UAA6B,OAAO,EAAE,OAAO;;QAGzC,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAG,+BAA+B,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;aAChF,SAAS,CAAC,UAAA,IAAI;YACX,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QAEP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,oFAAoF;;IACpF,qDAA8B;;IAA9B,UAA+B,OAAO,EAAE,OAAO;;QAG3C,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,iCAAiC,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;aACjF,SAAS,CAAC,UAAA,IAAI;YACX,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QAEP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,oEAAoE;IACpE,yEAAyE;;;IACzE,qCAAc;;;IAAd,UAAe,OAAO,EAAE,OAAO;;QAG3B,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,kCAAkC,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;aAClF,SAAS,CAAC,UAAA,IAAI;YACX,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QAEP,MAAM,CAAC,QAAQ,CAAC;KACnB;;gBAhGJ,UAAU;;;;gBANF,IAAI;gBACJ,mBAAmB;;uBAJ5B;EAUkC,WAAW;SAAhC,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Http } from '@angular/http';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n@Injectable()\r\nexport class LoginService extends BaseService {\r\n\r\n    constructor(public http: Http, \r\n                public localStorage: LocalStorageService) {\r\n        \r\n        super(http, localStorage);\r\n    }\r\n\r\n    // postLoginBotica function: post email and password to authenticate\r\n    postLoginBotica(baseUrl, payload) {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        console.log(\"PAYLOAD USER LOGIN\", payload);\r\n        this.saveBase(baseUrl , 'api-token-auth-client/', payload, this.headerLogin())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;        \r\n    }\r\n\r\n    // authFacebook void: post user to login in facebook with the backend\r\n    authFacebook(baseUrl, payload, observer) {\r\n\r\n        this.saveBase(baseUrl , 'api-token-auth-client-facebook/', payload, this.headerLogin())\r\n            .subscribe(data => {\r\n                this.localStorage.set('facebook', true);\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n    }\r\n\r\n    // authGoogle void: post user to login in google with the backend\r\n    authGoogle(baseUrl, payload, observer) {\r\n\r\n        this.saveBase(baseUrl , 'api-token-auth-client-google/', payload, this.headerLogin())\r\n            .subscribe(data => {\r\n                this.localStorage.set('google', true);\r\n                observer.next(datar\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n    }\r\n\r\n    // postLoginAfterRegisterGoogle function: after register user, login with google\r\n    postloginAfterRegisterGoogle(baseUrl, payload) {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.saveBase(baseUrl , 'api-token-auth-client-google/', payload, this.headerLogin())\r\n            .subscribe(data => {\r\n                observer.next(datar\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n\r\n        return observer;\r\n    }\r\n\r\n    // postLoginAfterRegisterFacebook function: after register user, login with facebook\r\n    postLoginAfterRegisterFacebook(baseUrl ,payload) {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.saveBase(baseUrl, 'api-token-auth-client-facebook/', payload, this.headerLogin())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n\r\n        return observer;    \r\n    }\r\n\r\n    // forgotPassword function: user forgot password and send to backend\r\n    //                          to verify and send e-mail to recover password\r\n    forgotPassword(baseUrl, payload) {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.saveBase(baseUrl, 'changepassword/user/application/', payload, this.headerLogin())\r\n            .subscribe(data => {\r\n                observer.next(datar\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n\r\n        return observer;\r\n    }\r\n\r\n}"]}