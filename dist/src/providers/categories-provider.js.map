{"version":3,"file":"categories-provider.js","sourceRoot":"","sources":["../../../src/providers/categories-provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAE3C,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;;AAGvD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;;AAG9C,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;;IAGjB,qCAAW;IAK9C,2BAAmB,IAAU,EAAS,YAAiC;QAAvE,YACI,kBAAM,IAAI,EAAE,YAAY,CAAC,SAC5B;QAFkB,UAAI,GAAJ,IAAI,CAAM;QAAS,kBAAY,GAAZ,YAAY,CAAqB;;2BAFzC,EAAE;;KAI/B;IAED,2EAA2E;;IAC3E,yCAAa;;IAAb,UAAc,OAAO,EAAE,OAAO,EAAE,OAAO;QAAvC,iBAmBC;QAjBG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;;QAGrB,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;YAClD,qBAAqB,EAAE,IAAI,CAAC;aACpC,SAAS,CAAC,UAAA,UAAU;YACjB,GAAG,CAAC,CAAY,UAA2B,EAA3B,KAAiB,UAAU,EAA3B,cAA2B,EAA3B,IAA2B;gBAAtC,IAAI,GAAG,SAAA;gBACR,IAAI,QAAQ,GAAkB,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC;gBACrD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAClC;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;SAClC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;IAED,yEAAyE;;IACzE,uCAAW;;IAAX,UAAY,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU;;QAG7C,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;YAClD,YAAY,GAAG,UAAU,EAAE,IAAI,CAAC;aACxC,SAAS,CAAC,UAAA,YAAY;YACnB,IAAI,QAAQ,GAAkB,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC;YAC9D,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3B,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;;gBA/CJ,UAAU;;;;gBAVF,IAAI;gBACJ,mBAAmB;;4BAH5B;EAauC,WAAW;SAArC,iBAAiB","sourcesContent":["import { Injectable } from '@angular/core';\r\n//import 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models\r\nimport { CategoryModel } from '../models/categoryModel';\r\n\r\n@Injectable()\r\nexport class CategoriesService extends BaseService {\r\n\r\n    // Categories array\r\n    categories: CategoryModel[] = [];\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // getCategories function: obtain information of categories in Botica store\r\n    getCategories(baseUrl, chainId, storeId) {\r\n\r\n        this.categories = [];\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId + \r\n                     '/categories/active/', null)\r\n            .subscribe(categories => {\r\n                for (var cat of <CategoryModel[]>categories) {\r\n                    var category: CategoryModel = new CategoryModel(cat);\r\n                    this.categories.push(category);\r\n                }\r\n                observer.next(this.categories);                                              \r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n        return observer;\r\n    }\r\n\r\n    // getCategories function: obtain information of category in Krono Market\r\n    getCategory(baseUrl, chainId, storeId, categoryId) {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId + \r\n                     '/category/' + categoryId, null)\r\n            .subscribe(categoryData => {\r\n                let category: CategoryModel = new CategoryModel(categoryData);\r\n                observer.next(category);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;\r\n    }\r\n\r\n}"]}