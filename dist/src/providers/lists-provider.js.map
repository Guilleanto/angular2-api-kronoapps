{"version":3,"file":"lists-provider.js","sourceRoot":"","sources":["../../../src/providers/lists-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models\r\nimport { ListModelGeneral } from '../models/listModelGeneral';\r\nimport { ListModelSpecific } from '../models/listModelSpecific';\r\n\r\n@Injectable()\r\nexport class ListsService extends BaseService {\r\n\r\n    lists: ListModelGeneral[] = [];\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // postListBasket function: create, or delete list in\r\n    //                    specific client\r\n    postListBasket(baseUrl, payload, task) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        payload['task'] = task;\r\n\r\n        console.log(\"PAYLOAD LIST USER\", payload);\r\n        this.saveBase(baseUrl , 'client/store/newlist/basket/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });  \r\n        return observer;\r\n    }\r\n\r\n\r\n    // postListOrder function: create, or delete list in\r\n    //                         specific client\r\n    postListOrder(baseUrl,payload, task) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        payload['task'] = task;\r\n\r\n        console.log(\"PAYLOAD LIST USER\", payload);\r\n        this.saveBase(baseUrl , 'client/store/newlist/order/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });  \r\n        return observer;\r\n    }\r\n\r\n    // getLists function: obtain all lists of specific user\r\n    getLists(baseUrl, applicationId, userId, storeId) {\r\n\r\n        this.lists = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'application/' + applicationId + '/client/' + userId\r\n                     + '/store/' + storeId + '/lists/', this.headerAuthentication())\r\n            .subscribe(lists => {\r\n                for (var list of <ListModelGeneral[]>lists) {\r\n                    var listClient: ListModelGeneral = new ListModelGeneral(list);\r\n                    this.lists.push(listClient);\r\n                }\r\n                observer.next(this.lists);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;   \r\n    }\r\n\r\n    // getList function: obtain specific list of specific user\r\n    getList(baseUrl, applicationId, userId, storeId, listId) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'application/' + applicationId + '/client/' + userId\r\n                     + '/store/' + storeId + '/list/' + listId + '/', this.headerAuthentication())\r\n            .subscribe(list => {\r\n                for (var i of list['items']) {\r\n                    if (i.productId != null) {\r\n                        i.productId['loadedProduct'] = new BehaviorSubject(null);\r\n                    }\r\n                }\r\n                var listClient: ListModelSpecific = new ListModelSpecific(list);\r\n                observer.next(listClient);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;   \r\n    }\r\n\r\n    // postListDelete function: post client list to delete in backend\r\n    postListDelete(baseUrl, payload, task) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        payload['task'] = task;\r\n\r\n        console.log(\"PAYLOAD LIST USER\", payload);\r\n        this.saveBase(baseUrl , 'client/store/deletelist/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });  \r\n        return observer;\r\n    }\r\n    \r\n}"]}