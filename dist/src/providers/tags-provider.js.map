{"version":3,"file":"tags-provider.js","sourceRoot":"","sources":["../../../src/providers/tags-provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,SAAS,CAAC;AACjB,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;;AAGvD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;;AAG9C,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;;IAGb,+BAAW;IAKxC,qBAAmB,IAAU,EAAS,YAAiC;QAAvE,YACI,kBAAM,IAAI,EAAE,YAAY,CAAC,SAC5B;QAFkB,UAAI,GAAJ,IAAI,CAAM;QAAS,kBAAY,GAAZ,YAAY,CAAqB;;qBAFpD,EAAE;;KAIpB;IAED,+DAA+D;;IAC/D,6BAAO;;IAAP,UAAQ,OAAO,EAAG,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU;QAAvD,iBAmBC;QAjBG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QAEf,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;cACjD,YAAY,GAAG,OAAO,GAAG,eAAe;YAC1C,UAAU,GAAG,eAAe,EAAE,IAAI,CAAC;aAC1C,SAAS,CAAC,UAAA,IAAI;YACX,GAAG,CAAC,CAAkB,UAAgB,EAAhB,KAAY,IAAI,EAAhB,cAAgB,EAAhB,IAAgB;gBAAjC,IAAI,SAAS,SAAA;gBACd,IAAI,GAAG,GAAa,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC5C,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;YACD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACnB;;gBA9BJ,UAAU;;;;gBAVF,IAAI;gBACJ,mBAAmB;;sBAH5B;EAaiC,WAAW;SAA/B,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models\r\nimport { TagModel } from '../models/tagModel';\r\n\r\n@Injectable()\r\nexport class TagsService extends BaseService {\r\n\r\n    // tags array \r\n    tags: TagModel[] = [];\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // getTags function: obtain information of tags in Botica store\r\n    getTags(baseUrl , chainId, storeId, categId, subcategId) {\r\n\r\n        this.tags = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'chain/' + chainId + '/store/' + storeId \r\n                    + '/category/' + categId + '/subcategory/' + \r\n                    subcategId + '/tags/active/', null)\r\n            .subscribe(tags => {\r\n                for (var tagObject of <TagModel[]>tags) {\r\n                    var tag: TagModel = new TagModel(tagObject);\r\n                    this.tags.push(tag);  \r\n                }\r\n                observer.next(tags);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;\r\n    }\r\n    \r\n}"]}