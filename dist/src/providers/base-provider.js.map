{"version":3,"file":"base-provider.js","sourceRoot":"","sources":["../../../src/providers/base-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAY,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AACxE,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,uBAAuB,CAAC;AAC/B,OAAO,SAAS,CAAC;AAGjB,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;;IAenD,qBAAmB,IAAU,EAAS,YAAiC;QAAvE,iBAEC;QAFkB,SAAI,GAAJ,IAAI,CAAM;QAAS,iBAAY,GAAZ,YAAY,CAAqB;;oBATxD,4BAA4B;yBAO/B,IAAI,SAAS,EAAE;;;2BA2Eb,UAAC,QAAkB;YAE7B,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC;;YAG/C,EAAE,CAAC,CAAE,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1G,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAC,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAC,CAAC,CAAC;aACvD;YAGD,IAAI,CAAC,CAAC;;gBAGF,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;oBAC9B,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAA;oBAC7C,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACnC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACnC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACrC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;oBACtC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACrC,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;oBACpD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC5C;gBAGD,IAAI,CAAC,CAAC;oBACF,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC5C;aACJ;SACJ;;;2BA+Ba;YAEV,IAAI,MAAM,GAAG;gBACT,cAAc,EAAE,kBAAkB;aACrC,CAAC;YAEF,KAAI,CAAC,YAAY,GAAG;gBAChB,OAAO,EAAE,IAAI,OAAO,CAAC,MAAM,CAAC;aAC/B,CAAC;YAEF,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC;SAC5B;;;oCAIsB;YAEnB,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC;gBACtB,eAAe,EAAE,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC;gBAC5D,cAAc,EAAE,kBAAkB;aACrC,CAAC,CAAC;YAEH,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;YAEtD,MAAM,CAAC,OAAO,CAAC;SAClB;KA5JA;IAED,oEAAoE;;IACpE,6BAAO;;IAAP,UAAS,OAAO,EAAE,KAAK,EAAE,OAAY;QAArC,iBA+BC;QA/BwB,wBAAA,EAAA,cAAY;QAEjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QACnB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,GAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,QAAQ,GAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;YAC3C,CAAC,UAAU,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAC,EAAE,CAAE,CAAC,CAAC,CAAC;YAC1C,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;;YAE3C,MAAM,CAAC,IAAI,UAAU,CAAC,UAAA,QAAQ;gBAC1B,KAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,UAAA,IAAI;oBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACP,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,EAAE,KAAI,CAAC,oBAAoB,EAAE,CAAC;6BAC1D,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;6BACtB,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;6BACvB,KAAK,CAAC,CAAC,CAAC;6BACR,SAAS,CAAE,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAA;qBACzC;iBACJ,CAAC,CAAA;gBACF,MAAM,CAAC,QAAQ,CAAC;aACnB,CAAC,CAAC;SACN;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,EAAE,OAAO,CAAC;iBACzC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;iBACvB,KAAK,CAAC,CAAC,CAAC,CAAA;SAChB;KAEJ;IAED,uDAAuD;;IACvD,8BAAQ;;IAAR,UAAS,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAY;QAA9C,iBA8BC;QA9BiC,wBAAA,EAAA,cAAY;QAE1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QACnB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,GAAC,IAAI,CAAC,CAAC;QAE9C,EAAE,CAAC,CAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;YAC3C,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAE,CAAC,CAAC,CAAC;YACtD,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAA;;YAE5C,MAAM,CAAC,IAAI,UAAU,CAAC,UAAA,QAAQ;gBAC1B,KAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,UAAA,IAAI;oBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACP,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,EAAE,OAAO,EAAE,KAAI,CAAC,oBAAoB,EAAE,CAAC;6BACpE,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;6BACtB,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;6BACvB,KAAK,CAAC,CAAC,CAAC;6BACR,SAAS,CAAE,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAA;qBACzC;iBACJ,CAAC,CAAA;gBACF,MAAM,CAAC,QAAQ,CAAC;aACnB,CAAC,CAAC;SACN;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC;iBAC3C,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;iBACvB,KAAK,CAAC,CAAC,CAAC,CAAA;SACxB;KAEJ;IAmCD,wEAAwE;IACxE,+CAA+C;;;IAC/C,sCAAgB;;;IAAhB;QAAA,iBAuBC;;QApBG,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,SAAS,GAAG;YACZ,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC;SAC9C,CAAA;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,2BAA2B,EAAE,SAAS,EAAE,IAAI,CAAC;aAClE,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;aACvB,SAAS,CAAC,UAAA,IAAI;YACX,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;YACrC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB,EAAE,UAAA,KAAK;YACJ,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;YAC3B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;KACvB;;gBA9IJ,UAAU;;;;gBAVF,IAAI;gBACJ,mBAAmB;;sBAF5B;;SAYa,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/Rx';\r\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\n\r\nimport { JwtHelper } from \"angular2-jwt\";\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class BaseService {\r\n  \r\n    // Base path\r\n    path: string = \"https://api.kronogroup.co/\";\r\n    //path: string = 'http://api-dev.kronogroup.co/';\r\n    //path: string = 'https://api-qa.kronogroup.co/';\r\n    baseurl: any;\r\n    info: any;\r\n    headerObject: any;\r\n\r\n    jwtHelper = new JwtHelper();\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n\r\n    }\r\n\r\n    // getBase function: get information from server with base path url \r\n    getBase( baseUrl, path2, options=null) {\r\n\r\n        this.baseurl = baseUrl;\r\n        let d = new Date();\r\n        let actualTime = Math.floor(d.getTime()/1000);\r\n        let tokenExp: any = this.localStorage.get('tokenExp');\r\n\r\n        if ( (this.localStorage.get('tokenExp') != null) && \r\n             (actualTime >= parseInt(tokenExp)-60) ) {\r\n            console.log(\"VOY A REFRESCAR TOKEN EN GET\")\r\n            // Initial value to the observer is null\r\n            return new Observable(observer => {\r\n                this.postRefreshToken().subscribe(data => {\r\n                    if (data) {\r\n                        this.http.get(baseUrl + path2, this.headerAuthentication())\r\n                        .map(res => res.json())\r\n                        .catch(this.handleError)\r\n                        .retry(5)\r\n                        .subscribe( res => observer.next(res))\r\n                    }\r\n                })\r\n                return observer;    \r\n            });\r\n        }\r\n        else {\r\n            return this.http.get(baseUrl + path2, options)\r\n                .map(res => res.json())\r\n                .catch(this.handleError)\r\n                .retry(5)  \r\n        }\r\n \r\n    }\r\n\r\n    // saveBase function: post in server with base path url\r\n    saveBase(baseUrl, path2, payload, options=null) {\r\n\r\n        this.baseurl = baseUrl;\r\n        let d = new Date();\r\n        let actualTime = Math.floor(d.getTime()/1000);\r\n\r\n        if ( (this.localStorage.get('tokenExp') != null) && \r\n             (actualTime >= this.localStorage.get('tokenExp')) ) {\r\n            console.log(\"VOY A REFRESCAR TOKEN EN POST\")\r\n            // Initial value to the observer is null\r\n            return new Observable(observer => {\r\n                this.postRefreshToken().subscribe(data => {\r\n                    if (data) {\r\n                        this.http.post(baseUrl + path2, payload, this.headerAuthentication())\r\n                        .map(res => res.json())\r\n                        .catch(this.handleError)\r\n                        .retry(5) \r\n                        .subscribe( res => observer.next(res))\r\n                    }\r\n                })\r\n                return observer;    \r\n            });\r\n        }\r\n        else {\r\n            return this.http.post(baseUrl + path2, payload, options)\r\n                        .map(res => res.json())\r\n                        .catch(this.handleError)\r\n                        .retry(5)  \r\n        }\r\n \r\n    }\r\n\r\n    // handleError function: throw error catched to specific service and specific component,\r\n    //                       server error or client error\r\n    handleError = (response: Response) => {\r\n\r\n        console.log(\"ERROR EN HANDLE ERROR\", response);\r\n\r\n        // If error is SERVER ERROR or CLIENT ERROR\r\n        if ( (response.status >= 401 && response.status <= 511) || (response.status >= 2 && response.status <= 324)) {\r\n            return Observable.throw({'error': response.status});\r\n        }\r\n\r\n        // If error is created in backend\r\n        else {\r\n\r\n            // Refresh has expired. Logout\r\n            if (response.json().error == 14) {\r\n                console.log(\"ME DIO ERROR 14 CERRARE SESION\")\r\n                this.localStorage.remove('userId');\r\n                this.localStorage.remove('basket');\r\n                this.localStorage.remove('basketId');\r\n                this.localStorage.remove('tokenUser');\r\n                this.localStorage.remove('tokenExp');\r\n                console.log(\"response de error 14\", response.json())\r\n                return Observable.throw(response.json());\r\n            }\r\n\r\n            // Others errors\r\n            else {\r\n                return Observable.throw(response.json());\r\n            }\r\n        }  \r\n    }\r\n\r\n    // postRefreshToken function: if token of user is expired, send post to \r\n    //                            request new token\r\n    postRefreshToken() {\r\n\r\n        // Initial value to the observer is null\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        let postToken = {\r\n            'token': this.localStorage.get('tokenUser')\r\n        }\r\n\r\n        this.http.post(this.baseurl + 'api-token-refresh-client/', postToken, null)\r\n                .map(res => res.json())\r\n                .catch(this.handleError)\r\n                .subscribe(data => {\r\n                    console.log(\"REFRESQUE TOKEN\", data);\r\n                    this.localStorage.set('tokenUser', data.token);\r\n                    let user = this.jwtHelper.decodeToken(data.token);\r\n                    this.localStorage.set('tokenExp', user.exp);\r\n                    observer.next(data);\r\n                }, error => {\r\n                    console.log(\"Error\", error)\r\n                    observer.next(error);\r\n                });\r\n            return observer;\r\n    }\r\n\r\n    // headerLogin function: create header object to pass like header \r\n    //                       in every login post\r\n    headerLogin = () => {\r\n\r\n        let header = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        this.headerObject = {\r\n            headers: new Headers(header)\r\n        };\r\n\r\n        return this.headerObject;\r\n    }\r\n\r\n    // headerAuthentication function: header neccesary to every request in the app with\r\n    //                                client in specific\r\n    headerAuthentication = () => {\r\n\r\n        let headers = new Headers({\r\n            'Authorization': \"JWT \" + this.localStorage.get('tokenUser'),\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        let options = new RequestOptions({ headers: headers })\r\n\r\n        return options;\r\n    }\r\n\r\n}"]}