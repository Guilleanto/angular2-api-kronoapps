{"version":3,"file":"store-provider.js","sourceRoot":"","sources":["../../src/providers/store-provider.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,SAAS;OACT,EAAE,IAAI,EAAE,MAAM,eAAe;OAC7B,EAAE,eAAe,EAAE,MAAM,sBAAsB;OAC/C,EAAE,mBAAmB,EAAE,MAAM,yBAAyB;OAGtD,EAAE,WAAW,EAAE,MAAM,0BAA0B;OAI/C,EAAE,UAAU,EAAE,MAAM,sBAAsB;OAK1C,EAAE,WAAW,EAAE,MAAM,uBAAuB;AAGnD;IAAkC,gCAAW;IAkBzC,sBAAmB,IAAU,EAAS,YAAiC;QACnE,kBAAM,IAAI,EAAE,YAAY,CAAC,CAAC;QADX,SAAI,GAAJ,IAAI,CAAM;QAAS,iBAAY,GAAZ,YAAY,CAAqB;QAhBvE,iBAAiB;QACjB,aAAQ,GAAmB,EAAE,CAAC;QAE9B,kBAAkB;QAClB,kCAAkC;QAClC,iCAAiC;QAEjC,kCAAkC;QAClC,WAAM,GAAiB,EAAE,CAAC;QAE1B,0BAA0B;QAC1B,qCAAqC;QAErC,gBAAgB;QAChB,YAAO,GAAkB,EAAE,CAAC;IAI5B,CAAC;IAED,8DAA8D;IAC9D,+BAAQ,GAAR,UAAS,OAAO,EAAE,OAAO;QAErB,wCAAwC;QACxC,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;cACtC,UAAU,EAAE,IAAI,CAAC;aAC3B,SAAS,CAAC,UAAA,SAAS;YAChB,IAAI,KAAK,GAAe,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;YAClD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED,uEAAuE;IACvE,iCAAU,GAAV,UAAW,OAAO,EAAE,OAAO;QAA3B,iBAmBC;QAjBG,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAElB,wCAAwC;QACxC,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;cACtC,kBAAkB,EAAE,IAAI,CAAC;aACnC,SAAS,CAAC,UAAA,OAAO;YACd,GAAG,CAAC,CAAY,UAAY,EAAZ,KAAK,OAAO,EAAZ,cAAY,EAAZ,IAAY,CAAC;gBAAxB,IAAI,GAAG,SAAA;gBACR,IAAI,MAAM,GAAgB,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC/C,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC7B;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED,mGAAmG;IACnG,gEAAgE;IAChE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2GG;IAEH,iFAAiF;IACjF;;;;;;;;;;;;;;;;;;OAkBG;IAEA,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,CAAC;IACF,mBAAC;AAAD,CAAC,AAzMD,CAAkC,WAAW,GAyM5C","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { Http } from '@angular/http';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { LocalStorageService } from 'angular-2-local-storage';\n\n// Providers\nimport { BaseService } from '../providers/my-provider';\n//import { LoginService } from '../providers/loginService';\n\n// Models\nimport { StoreModel } from '../models/storeModel';\nimport { ProductModel } from '../models/productModel';\n//import { ScheduleModel } from '../models/scheduleModel';\n//import { PaymentsModel } from '../models/paymentsModel';\n//import { DelivStoreModel } from '../models/delivStoreModel';\nimport { BannerModel } from '../models/bannerModel';\n\n\nexport class StoreService extends BaseService {\n\n    // Products array\n    products: ProductModel[] = [];\n\n    // Schedules array\n    //schedules: ScheduleModel[] = [];\n    //payments: PaymentsModel[] = [];\n\n    // Array to save object storeModel\n    stores: StoreModel[] = [];\n\n    // Forms of delivery array\n    //delivStore: DelivStoreModel[] = [];\n\n    // Banners array\n    banners: BannerModel[] = [];\n\n    constructor(public http: Http, public localStorage: LocalStorageService) {\n        super(http, localStorage);\n    }\n\n    // getStore function: obtain information of store Botica Junin\n    getStore(chainId, storeId) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/store/' + storeId \n                     + '/active/', null)\n            .subscribe(storeData => {\n                var store: StoreModel = new StoreModel(storeData);\n                observer.next(store);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;          \n    }\n\n    // getBanners function: obtain banners from specific store Botica Junin\n    getBanners(chainId, storeId) {\n\n        this.banners = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/store/' + storeId \n                     + '/banners/active/', null)\n            .subscribe(banners => {\n                for (var ban of <any>banners) {\n                    var banner: BannerModel = new BannerModel(ban);\n                    this.banners.push(banner);\n                }\n                observer.next(this.banners);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;    \n    }\n\n    // getBestsellersProductsStore function: obtain information of bestsellers products in Botica store\n    //                                       when user is not logged\n    /*getBestsellersProductsStore(chainId, storeId) {\n\n        this.products = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/store/' + storeId + \n                     '/bestsellers/', null)\n            .subscribe(products => {\n                products.forEach(productsData => {\n                    var product: ProductModel = new ProductModel(productsData);\n                    this.products.push(product);\n                });\n                observer.next(this.products);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;   \n    }\n\n    // getBestsellersProductsUser function: obtain information of bestsellers products in Botica store\n    //                                      from specific user\n    getBestsellersProductsUser(applicationId, userId, storeId) {\n\n        this.products = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('application/' + applicationId + '/client/' + userId + \n                     '/store/' + storeId + '/bestsellers/', null)\n            .subscribe(products => {\n                products.forEach(productsData => {\n                    var product: ProductModel = new ProductModel(productsData);\n                    this.products.push(product);\n                });\n                observer.next(this.products);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;   \n    }\n\n    // getSchedule function: obtain information of schedule in Botica store\n    /*getSchedule(chainId, storeId) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.schedules = [];\n\n        this.getBase('chain/' + chainId + '/store/' + storeId + \n                     '/schedules/', this.headerAuthentication())\n            .subscribe(schedulesData => {\n                var schedule: ScheduleModel = new ScheduleModel(schedulesData);\n                this.schedules.push(schedule);\n                observer.next(this.schedules);\n            }, error => {\n                observer.next(error);\n            });\n        return observer; \n    }\n\n    // getSchedule function: obtain information of schedule in Botica store\n    getPayments(chainId, storeId) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.payments = [];\n\n        this.getBase('chain/' + chainId + '/store/' + storeId + \n                     '/payments/', this.headerAuthentication())\n            .subscribe(payments => {\n                payments.forEach(paymentData => {\n                    var payment: PaymentsModel = new PaymentsModel(paymentData);\n                    this.payments.push(payment);\n                });\n                observer.next(this.payments);\n            }, error => {\n                observer.next(error);\n            });\n        return observer; \n    }     \n\n    // getDelivStores function: obtain information of existent type of delivery in\n    //                          Botica store\n    getDelivStores(chainId, storeId) {\n\n        this.delivStore = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/store/' + storeId + \n                     '/delivstores/', this.headerAuthentication())\n            .subscribe(delivStore => {\n                delivStore.forEach(delivStoreData => {\n                    var deliv: DelivStoreModel = new DelivStoreModel(delivStoreData);\n                    this.delivStore.push(deliv);\n                });\n                observer.next(this.delivStore);\n            }, error => {\n                observer.next(error);\n            });\n        return observer; \n    }*/\n  \n    // getStores function: obtain information of different Botica Junin stores       \n    /*getStores(chainId) {\n\n        this.stores = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/stores/active/', null)\n            .subscribe(stores => {\n                stores.forEach(storeData => {\n                    var store: StoreModel = new StoreModel(storeData);\n                    this.stores.push(store);\n                })\n                observer.next(this.stores);\n            }, error => {\n                observer.next(error);\n            });\n        return observer; \n    }*/\n    \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}