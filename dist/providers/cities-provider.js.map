{"version":3,"file":"cities-provider.js","sourceRoot":"","sources":["../../src/providers/cities-provider.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,SAAS;OACT,EAAE,IAAI,EAAE,MAAM,eAAe;OAC7B,EAAE,mBAAmB,EAAE,MAAM,yBAAyB;OACtD,EAAE,eAAe,EAAE,MAAM,sBAAsB;OAG/C,EAAE,WAAW,EAAE,MAAM,iBAAiB;OAGtC,EAAE,SAAS,EAAE,MAAM,qBAAqB;AAG/C;IAAmC,iCAAW;IAK1C,uBAAmB,IAAU,EAAS,YAAiC;QACnE,kBAAM,IAAI,EAAE,YAAY,CAAC,CAAC;QADX,SAAI,GAAJ,IAAI,CAAM;QAAS,iBAAY,GAAZ,YAAY,CAAqB;QAHvE,eAAe;QACf,WAAM,GAAgB,EAAE,CAAC;IAIzB,CAAC;IAED,2EAA2E;IAC3E,iCAAS,GAAT,UAAU,aAAa;QAAvB,iBAkBC;QAhBG,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,wCAAwC;QACxC,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAC,aAAa,GAAC,iBAAiB,EAAE,IAAI,CAAC;aAC7D,SAAS,CAAC,UAAA,MAAM;YACb,GAAG,CAAC,CAAY,UAAmB,EAAnB,KAAa,MAAM,EAAnB,cAAmB,EAAnB,IAAmB,CAAC;gBAA/B,IAAI,GAAG,SAAA;gBACR,IAAI,IAAI,GAAc,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;gBACzC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1B;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEE,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,CAAC;IACF,oBAAC;AAAD,CAAC,AAtCD,CAAmC,WAAW,GAsC7C","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { Http } from '@angular/http';\nimport { LocalStorageService } from 'angular-2-local-storage';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n// Providers\nimport { BaseService } from './base-provider';\n\n// Models\nimport { CityModel } from '../models/cityModel';\n\n\nexport class CitiesService extends BaseService {\n\n    // Cities array\n    cities: CityModel[] = [];\n\n    constructor(public http: Http, public localStorage: LocalStorageService) {\n        super(http, localStorage);\n    }\n\n    // getCategories function: obtain information of categories in Botica store\n    getCities(applicationId) {\n\n        this.cities = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('application/'+applicationId+'/cities/active/', null)\n            .subscribe(cities => {\n                for (var cit of <CityModel[]>cities) {\n                    var city: CityModel = new CityModel(cit);\n                    this.cities.push(city);\n                }\n                observer.next(this.cities);                                              \n            }, error => {\n                observer.next(error);\n            }); \n        return observer;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}