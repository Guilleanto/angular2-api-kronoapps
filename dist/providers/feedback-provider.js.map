{"version":3,"file":"feedback-provider.js","sourceRoot":"","sources":["../../src/providers/feedback-provider.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,SAAS;OACT,EAAE,IAAI,EAAE,MAAM,eAAe;OAC7B,EAAE,mBAAmB,EAAE,MAAM,yBAAyB;OACtD,EAAE,eAAe,EAAE,MAAM,sBAAsB;OAG/C,EAAE,WAAW,EAAE,MAAM,iBAAiB;AAG7C;IAAqC,mCAAW;IAE5C,yBAAmB,IAAU,EAAS,YAAiC;QACnE,kBAAM,IAAI,EAAE,YAAY,CAAC,CAAC;QADX,SAAI,GAAJ,IAAI,CAAM;QAAS,iBAAY,GAAZ,YAAY,CAAqB;IAEvE,CAAC;IAED,wCAAwC;IACxC,sCAAY,GAAZ,UAAa,OAAO,EAAE,OAAO,EAAE,aAAa;QAExC,OAAO,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAExB,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACtB,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzC,OAAO,CAAC,MAAM,CAAC,GAAI,IAAI,CAAC,cAAc,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACpG,OAAO,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAEzC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAA;QAC/B,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,kBAAkB,EAAE,OAAO,EAAE,EAAE,CAAC;aAC/C,SAAS,CAAC,UAAA,IAAI;YACX,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACX,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEE,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,CAAC;IACF,sBAAC;AAAD,CAAC,AAxCD,CAAqC,WAAW,GAwC/C","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n\r\nexport class FeedbackService extends BaseService {\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // postFeedback function: post feedback \r\n    postFeedback(baseUrl, payload, applicationId) {\r\n\r\n        payload['task'] = 'add';\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        let date = new Date();\r\n        let user = this.localStorage.get('user');\r\n        payload['date'] =  date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + \"-\" + date.getUTCDate();\r\n        payload['applicationId'] = applicationId;\r\n\r\n        if (user) {\r\n            payload.userId = user['id']\r\n        }\r\n\r\n        console.log(\"payload feedback\", payload);\r\n        this.saveBase(baseUrl + '/feedbacks/post/', payload, {})\r\n                .subscribe(data => {\r\n                    observer.next(data);\r\n                }, error => {\r\n                    observer.next(error);\r\n                });\r\n        return observer;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}