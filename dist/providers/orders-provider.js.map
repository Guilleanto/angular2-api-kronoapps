{"version":3,"file":"orders-provider.js","sourceRoot":"","sources":["../../src/providers/orders-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models \r\nimport { PrescriptionModel } from '../models/prescriptionModel';\r\nimport { OrderModel } from '../models/orderModel';\r\n\r\n\r\nexport class OrdersService extends BaseService {\r\n\r\n    prescriptions: PrescriptionModel[] = [];\r\n\r\n    // Orders array\r\n    orders: OrderModel[] = [];\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // postOrder function: post order inside orders of specific\r\n    //                     client in Botica store\r\n    postOrder(baseUrl, payload) {\r\n        \r\n        payload['task'] = 'add';\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        console.log(\"payload de lo que hare post con order\", payload);\r\n        this.saveBase(baseUrl, 'chain/store/client/basket/payment/prescription/orders/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {              \r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;\r\n    }\r\n\r\n    // getPrescription function: obtain information of user last prescription in Botica store\r\n    getPrescription(baseUrl, applicationId, userId) {\r\n\r\n        this.prescriptions = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'application/' + applicationId + '/client/' + userId + '/prescriptions/last/',\r\n                     this.headerAuthentication())\r\n            .subscribe(prescriptions => {\r\n                for (var presc of <PrescriptionModel[]>prescriptions) {\r\n                    var prescription: PrescriptionModel = new PrescriptionModel(presc);\r\n                    this.prescriptions.push(prescription);                    \r\n                }\r\n                observer.next(this.prescriptions);                                              \r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n        return observer;\r\n    }\r\n\r\n    // getOrders function: obtain information of orders of specific client\r\n    //                     in Botica store\r\n    getOrders(baseUrl, applicationId, userId, storeId) {\r\n\r\n        this.orders = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'application/' + applicationId + '/client/' + userId + '/store/' + \r\n                     storeId + '/orders/', this.headerAuthentication())\r\n            .subscribe(orders => {\r\n                for (var ord of <OrderModel[]>orders) {\r\n                    var order: OrderModel = new OrderModel(ord);\r\n                    this.orders.push(order);\r\n                }\r\n                observer.next(this.orders);                                              \r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n        return observer;\r\n    }\r\n\r\n    // getOrders function: obtain information of orders of specific client\r\n    //                     in Botica store\r\n    getOrdersKrono(baseUrl, applicationId, userId) {\r\n\r\n        this.orders = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl, 'application/' + applicationId + '/client/' + userId + '/orders/', this.headerAuthentication())\r\n            .subscribe(orders => {\r\n                for (var ord of <OrderModel[]>orders) {\r\n                    var order: OrderModel = new OrderModel(ord);\r\n                    this.orders.push(order);\r\n                }\r\n                observer.next(this.orders);                                              \r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n        return observer;\r\n    }\r\n\r\n\r\n    // getOrder function: obtain information of specific client order\r\n    getOrder(baseUrl, applicationId, userId, storeId, orderId) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase(baseUrl , 'application/' + applicationId + '/client/' + userId + '/store/' + \r\n                     storeId + '/order/' + orderId + '/', this.headerAuthentication())\r\n            .subscribe(order => {\r\n                for (var i of order['items']) {\r\n                    if (i.productId != null) {\r\n                        i.productId['loadedProduct'] = new BehaviorSubject(null);\r\n                    }\r\n                }\r\n                var orderClient: OrderModel = new OrderModel(order);\r\n                observer.next(orderClient);                                              \r\n            }, error => {\r\n                observer.next(error);\r\n            }); \r\n        return observer;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}