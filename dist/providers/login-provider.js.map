{"version":3,"file":"login-provider.js","sourceRoot":"","sources":["../../src/providers/login-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Http } from '@angular/http';\nimport { LocalStorageService } from 'angular-2-local-storage';\n\n// Providers\nimport { BaseService } from './base-provider';\n\n\nexport class LoginService extends BaseService {\n\n    constructor(public http: Http, \n                public localStorage: LocalStorageService) {\n        \n        super(http, localStorage);\n    }\n\n    // postLoginBotica function: post email and password to authenticate\n    postLoginBotica(payload) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        console.log(\"PAYLOAD USER LOGIN BOTICA\", payload);\n        this.saveBase('api-token-auth-client/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(data);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;        \n    }\n\n    // authFacebook void: post user to login in facebook with the backend\n    authFacebook(payload, observer) {\n\n        this.saveBase('api-token-auth-client-facebook/', payload, this.headerLogin())\n            .subscribe(data => {\n                this.localStorage.set('facebook', true);\n                observer.next(data);\n            }, error => {\n                observer.next(error);\n            });\n    }\n\n    // authGoogle void: post user to login in google with the backend\n    authGoogle(payload, observer) {\n\n        this.saveBase('api-token-auth-client-google/', payload, this.headerLogin())\n            .subscribe(data => {\n                this.localStorage.set('google', true);\n                observer.next(datan            }, error => {\n                observer.next(error);\n            });\n    }\n\n    // postLoginAfterRegisterGoogle function: after register user, login with google\n    postloginAfterRegisterGoogle(payload) {\n\n        payload['id_token'] = this.localStorage.get('tokenUser');\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.saveBase('api-token-auth-client-google/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(datan            }, error => {\n                observer.next(error);\n            });\n\n        return observer;\n    }\n\n    // postLoginAfterRegisterFacebook function: after register user, login with facebook\n    postLoginAfterRegisterFacebook(payload) {\n\n        payload['access_token'] = this.localStorage.get('tokenUser');\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.saveBase('api-token-auth-client-facebook/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(data);\n            }, error => {\n                observer.next(error);\n            }); \n\n        return observer;    \n    }\n\n    // forgotPassword function: user forgot password and send to backend\n    //                          to verify and send e-mail to recover password\n    forgotPassword(payload) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.saveBase('changepassword/user/application/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(datan            }, error => {\n                observer.next(error);\n            });\n\n        return observer;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}