{"version":3,"file":"login-provider.js","sourceRoot":"","sources":["../../src/providers/login-provider.ts"],"names":[],"mappings":"","sourcesContent":["/*import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Http } from '@angular/http';\nimport { LocalStorageService } from 'angular-2-local-storage';\n\n// Plugins\nimport { GooglePlus } from '@ionic-native/google-plus';\nimport { Facebook, FacebookLoginResponse } from '@ionic-native/facebook';\n\n// Providers\nimport { BaseService } from './my-provider';\n\n@Injectable()\nexport class LoginService extends BaseService {\n\n    userRegister: boolean = false;\n    user: any;\n    l: any;\n    name: any;\n    picture: any;\n    email: any;\n\n    constructor(public http: Http, \n                public localStorage: LocalStorageService,\n                public googlePlus: GooglePlus, \n                public facebook: Facebook) {\n        \n        super(http, localStorage);\n    }\n\n    // postLoginBotica function: post email and password to authenticate\n    postLoginBotica(payload) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        console.log(\"PAYLOAD USER LOGIN BOTICA\", payload);\n        this.saveBase('api-token-auth-client/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(data);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;        \n    }\n\n    // postLoginFacebook function: post email and password to authenticate\n    postLoginFacebook(payload) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.facebook.login(['public_profile', 'email'])\n            .then((res: FacebookLoginResponse) => {\n\n                this.facebook.api('me?fields=id,name,email,first_name,picture.width(720).height(720).as(picture_large)', []).then(profile => {\n\n                    // Obtain information user to show in register view in profile\n                    this.email = profile['email'];\n                    this.picture = profile['picture_large']['data']['url'];\n                    this.name = profile['first_name'];\n                });\n                \n                payload['access_token'] = res.authResponse.accessToken;\n                this.localStorage.set('tokenUser', res.authResponse.accessToken);\n\n                this.saveBase('api-token-auth-client-facebook/', payload, this.headerLogin())\n                    .subscribe(data => {\n                        this.localStorage.set('facebook', true);\n                        observer.next(data);\n                    }, error => {\n                        observer.next(error);\n                    });\n            })\n            .catch(error => {\n                console.log('Error logging into Facebook', error);\n                observer.next(error);\n            });\n\n        return observer;\n    }\n\n    // postLoginGoogle function: post email and password to authenticate\n    postLoginGoogle(payload, googleWebKey) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        // webClientId is WEB CLIENT ID, NOT ANDROID CLIENT ID (in developers.google)\n        this.googlePlus.login({\n            'webClientId': googleWebKey,\n            'offline': true\n        }).then(res => {\n            payload['id_token'] = res.idToken;\n            this.localStorage.set('tokenUser', res.idToken);\n\n            // Obtain information user to show in register view in profile\n            this.email = res.email;\n            this.picture = res.imageUrl;\n            this.name = res.displayName;\n\n            this.saveBase('api-token-auth-client-google/', payload, this.headerLogin())\n                .subscribe(data => {\n                    this.localStorage.set('google', true);\n                    observer.next(datan                }, error => {\n                    observer.next(error);\n                });\n        })\n        .catch(error => {\n            console.error(error);\n            observer.next(error);\n        });\n\n        return observer;\n    }\n\n    // postLoginAfterRegisterGoogle function: after register user, login with google\n    postloginAfterRegisterGoogle(payload) {\n\n        payload['id_token'] = this.localStorage.get('tokenUser');\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.saveBase('api-token-auth-client-google/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(datan            }, error => {\n                observer.next(error);\n            });\n\n        return observer;\n    }\n\n    // postLoginAfterRegisterFacebook function: after register user, login with facebook\n    postLoginAfterRegisterFacebook(payload) {\n\n        payload['access_token'] = this.localStorage.get('tokenUser');\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.saveBase('api-token-auth-client-facebook/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(data);\n            }, error => {\n                observer.next(error);\n            }); \n\n        return observer;    \n    }\n\n    // logoutFacebook void: logout from facebook successfully\n    logoutFacebook() {\n        this.facebook.logout().then(res => {\n            //alert(JSON.stringify(res));\n        }, error => {\n            //alert(error);\n        });\n    }\n\n    // disconnectGoogle void: logout and disconnect account from \n    //                        google successfully\n    disconnectGoogle() {\n        this.googlePlus.disconnect().then(res => {\n            //alert(JSON.stringify(res));\n        }, error => {\n            //alert(error);\n        });\n    }\n\n    // forgotPassword function: user forgot password and send to backend\n    //                          to verify and send e-mail to recover password\n    forgotPassword(payload) {\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.saveBase('changepassword/user/application/', payload, this.headerLogin())\n            .subscribe(data => {\n                observer.next(datan            }, error => {\n                observer.next(error);\n            });\n\n        return observer;\n    }\n\n}*/\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}