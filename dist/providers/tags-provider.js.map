{"version":3,"file":"tags-provider.js","sourceRoot":"","sources":["../../src/providers/tags-provider.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,SAAS;OACT,EAAE,IAAI,EAAE,MAAM,eAAe;OAC7B,EAAE,mBAAmB,EAAE,MAAM,yBAAyB;OACtD,EAAE,eAAe,EAAE,MAAM,sBAAsB;OAG/C,EAAE,WAAW,EAAE,MAAM,eAAe;OAGpC,EAAE,QAAQ,EAAE,MAAM,oBAAoB;AAG7C;IAAiC,+BAAW;IAKxC,qBAAmB,IAAU,EAAS,YAAiC;QACnE,kBAAM,IAAI,EAAE,YAAY,CAAC,CAAC;QADX,SAAI,GAAJ,IAAI,CAAM;QAAS,iBAAY,GAAZ,YAAY,CAAqB;QAHvE,cAAc;QACd,SAAI,GAAe,EAAE,CAAC;IAItB,CAAC;IAED,+DAA+D;IAC/D,6BAAO,GAAP,UAAQ,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU;QAA7C,iBAmBC;QAjBG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QAEf,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;cACvC,YAAY,GAAG,OAAO,GAAG,eAAe;YAC1C,UAAU,GAAG,eAAe,EAAE,IAAI,CAAC;aAC1C,SAAS,CAAC,UAAA,IAAI;YACX,GAAG,CAAC,CAAkB,UAAgB,EAAhB,KAAY,IAAI,EAAhB,cAAgB,EAAhB,IAAgB,CAAC;gBAAlC,IAAI,SAAS,SAAA;gBACd,IAAI,GAAG,GAAa,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC5C,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;YACD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEE,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,0BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,CAAC;IACF,kBAAC;AAAD,CAAC,AAvCD,CAAiC,WAAW,GAuC3C","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { Http } from '@angular/http';\nimport { LocalStorageService } from 'angular-2-local-storage';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n// Providers\nimport { BaseService } from './my-provider';\n\n// Models\nimport { TagModel } from '../models/tagModel';\n\n\nexport class TagsService extends BaseService {\n\n    // tags array \n    tags: TagModel[] = [];\n\n    constructor(public http: Http, public localStorage: LocalStorageService) {\n        super(http, localStorage);\n    }\n\n    // getTags function: obtain information of tags in Botica store\n    getTags(chainId, storeId, categId, subcategId) {\n\n        this.tags = [];\n\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/store/' + storeId \n                    + '/category/' + categId + '/subcategory/' + \n                    subcategId + '/tags/active/', null)\n            .subscribe(tags => {\n                for (var tagObject of <TagModel[]>tags) {\n                    var tag: TagModel = new TagModel(tagObject);\n                    this.tags.push(tag);  \n                }\n                observer.next(tags);\n            }, error => {\n                observer.next(error);\n            });\n        return observer;\n    }\n    \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}