{"version":3,"file":"categories-provider.js","sourceRoot":"","sources":["../../src/providers/categories-provider.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,SAAS;OACT,EAAE,IAAI,EAAE,MAAM,eAAe;OAC7B,EAAE,mBAAmB,EAAE,MAAM,yBAAyB;OACtD,EAAE,eAAe,EAAE,MAAM,sBAAsB;OAG/C,EAAE,WAAW,EAAE,MAAM,eAAe;OAGpC,EAAE,aAAa,EAAE,MAAM,yBAAyB;AAGvD;IAAuC,qCAAW;IAK9C,2BAAmB,IAAU,EAAS,YAAiC;QACnE,kBAAM,IAAI,EAAE,YAAY,CAAC,CAAC;QADX,SAAI,GAAJ,IAAI,CAAM;QAAS,iBAAY,GAAZ,YAAY,CAAqB;QAHvE,mBAAmB;QACnB,eAAU,GAAoB,EAAE,CAAC;IAIjC,CAAC;IAED,2EAA2E;IAC3E,yCAAa,GAAb,UAAc,OAAO,EAAE,OAAO;QAA9B,iBAmBC;QAjBG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,wCAAwC;QACxC,IAAI,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,OAAO;YACxC,qBAAqB,EAAE,IAAI,CAAC;aACpC,SAAS,CAAC,UAAA,UAAU;YACjB,GAAG,CAAC,CAAY,UAA2B,EAA3B,KAAiB,UAAU,EAA3B,cAA2B,EAA3B,IAA2B,CAAC;gBAAvC,IAAI,GAAG,SAAA;gBACR,IAAI,QAAQ,GAAkB,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC;gBACrD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAClC;YACD,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC,EAAE,UAAA,KAAK;YACJ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEE,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,CAAC;IACF,wBAAC;AAAD,CAAC,AAvCD,CAAuC,WAAW,GAuCjD","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { Http } from '@angular/http';\nimport { LocalStorageService } from 'angular-2-local-storage';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n// Providers\nimport { BaseService } from './my-provider';\n\n// Models\nimport { CategoryModel } from '../models/categoryModel';\n\n\nexport class CategoriesService extends BaseService {\n\n    // Categories array\n    categories: CategoryModel[] = [];\n\n    constructor(public http: Http, public localStorage: LocalStorageService) {\n        super(http, localStorage);\n    }\n\n    // getCategories function: obtain information of categories in Botica store\n    getCategories(chainId, storeId) {\n\n        this.categories = [];\n\n        // Initial value to the observer is null\n        let observer = new BehaviorSubject(null);\n\n        this.getBase('chain/' + chainId + '/store/' + storeId + \n                     '/categories/active/', null)\n            .subscribe(categories => {\n                for (var cat of <CategoryModel[]>categories) {\n                    var category: CategoryModel = new CategoryModel(cat);\n                    this.categories.push(category);\n                }\n                observer.next(this.categories);                                              \n            }, error => {\n                observer.next(error);\n            }); \n        return observer;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}