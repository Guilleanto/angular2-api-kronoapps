{"version":3,"file":"lists-provider.js","sourceRoot":"","sources":["../../src/providers/lists-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport { Http } from '@angular/http';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { LocalStorageService } from 'angular-2-local-storage';\r\n\r\n// Providers\r\nimport { BaseService } from './base-provider';\r\n\r\n// Models\r\nimport { ListModelGeneral } from '../models/listModelGeneral';\r\nimport { ListModelSpecific } from '../models/listModelSpecific';\r\n\r\n\r\nexport class ListsService extends BaseService {\r\n\r\n    lists: ListModelGeneral[] = [];\r\n\r\n    constructor(public http: Http, public localStorage: LocalStorageService) {\r\n        super(http, localStorage);\r\n    }\r\n\r\n    // postListBasket function: create, or delete list in\r\n    //                    specific client\r\n    postListBasket(payload, task) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        payload['task'] = task;\r\n\r\n        console.log(\"PAYLOAD LIST USER\", payload);\r\n        this.saveBase('client/store/newlist/basket/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });  \r\n        return observer;\r\n    }\r\n\r\n\r\n    // postListOrder function: create, or delete list in\r\n    //                         specific client\r\n    postListOrder(payload, task) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        payload['task'] = task;\r\n\r\n        console.log(\"PAYLOAD LIST USER\", payload);\r\n        this.saveBase('client/store/newlist/order/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });  \r\n        return observer;\r\n    }\r\n\r\n    // getLists function: obtain all lists of specific user\r\n    getLists(applicationId, userId, storeId) {\r\n\r\n        this.lists = [];\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase('application/' + applicationId + '/client/' + userId\r\n                     + '/store/' + storeId + '/lists/', this.headerAuthentication())\r\n            .subscribe(lists => {\r\n                for (var list of <ListModelGeneral[]>lists) {\r\n                    var listClient: ListModelGeneral = new ListModelGeneral(list);\r\n                    this.lists.push(listClient);\r\n                }\r\n                observer.next(this.lists);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;   \r\n    }\r\n\r\n    // getList function: obtain specific list of specific user\r\n    getList(applicationId, userId, storeId, listId) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        this.getBase('application/' + applicationId + '/client/' + userId\r\n                     + '/store/' + storeId + '/list/' + listId + '/', this.headerAuthentication())\r\n            .subscribe(list => {\r\n                for (var i of list['items']) {\r\n                    if (i.productId != null) {\r\n                        i.productId['loadedProduct'] = new BehaviorSubject(null);\r\n                    }\r\n                }\r\n                var listClient: ListModelSpecific = new ListModelSpecific(list);\r\n                observer.next(listClient);\r\n            }, error => {\r\n                observer.next(error);\r\n            });\r\n        return observer;   \r\n    }\r\n\r\n    // postListDelete function: post client list to delete in backend\r\n    postListDelete(payload, task) {\r\n\r\n        let observer = new BehaviorSubject(null);\r\n\r\n        payload['task'] = task;\r\n\r\n        console.log(\"PAYLOAD LIST USER\", payload);\r\n        this.saveBase('client/store/deletelist/', payload, \r\n                      this.headerAuthentication())\r\n            .subscribe(data => {\r\n                observer.next(data);\r\n            }, error => {\r\n                observer.next(error);\r\n            });  \r\n        return observer;\r\n    }\r\n    \r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}